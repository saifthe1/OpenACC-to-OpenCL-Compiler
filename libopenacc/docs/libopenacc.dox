/*! \page libopenacc OpenACC Library
 *
 * \tableofcontents
 *
 * \section intro OpenCL implementation of OpenACC API
 *
 * An OpenACC Compiler needs an implementation of OpenACC API. This page documents our implementation of this API.
 * Our implementation is not limited to the standardized API, with added three parts: a private interface, an internal one and finally the device API.
 * This implementation intended to follow the standard closely and provides an open-source reference implementation for OpenACC API.
 *
 * \section related Related Work
 *
 * \todo In this section, we need to list related work and relevance
 *
 * \section design_implementation Design & Implementation
 *
 * \subsection four_part_api OpenACC API as 4 sub-APIs
 *
 * We subdivided OpenACC API in 4 categories: public, private, internal and device(s). It is not excludes that multiple device APIs co-exists.
 *
 * \subsection public_api OpenACC Public API
 *
 * This is the standardized OpenACC 2.0 API. It is accessible to the user. It is defined in include/OpenACC/openacc.h .
 * It includes a small implementation dependent part, defined in include/OpenACC/openacc.h (it is filled with recommended values from OpenACC 2.0).
 *
 * \subsection private_api OpenACC Private API
 *
 * This part of the API is used by the compiler when transforming the original code. Specifically, directives (and associated statements) are replaced by call to both public and private API.
 *
 * \subsection internal_api OpenACC Internal API
 *
 * This part of the API is used by the compiler when generating code. When transforming the input code, the OpenACC Compiler extracts parts of the original code (i.e. loops inside parallel construct).
 * This code is used to produce kernels. The compiler uses the internal API to provide information about these kernels to the runtime.
 * The compiler initializes the runtime's global data-structure. It contains pointers to generated functions.
 *
 * \subsection device_api OpenACC Device(s) API
 *
 * This part of the API is used by the compiler when generating kernels. It is used to "enforce" OpenACC execution model. It is also used to communicate with the host runtime. 
 *
 * \section other Other 
 *
 * 
 *
 */

