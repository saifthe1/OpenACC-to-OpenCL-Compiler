/*!
 * \addtogroup grp_libopenacc_api_internal Internal
 * @{
 * 
 * \file libopenacc-internal.h
 *
 * \author Tristan Vanderbruggen
 * \date 09/2013
 *
 */

#ifndef __LIB_OPENACC_INTERNAL_H__
#define __LIB_OPENACC_INTERNAL_H__

#define _OPENACC_LIB_INTERNAL         1
#define _OPENACC_LIB_INTERNAL_NAME    "OpenACC LIB for OpenCL in ROSE Compiler"
#define _OPENACC_LIB_INTERNAL_VERSION 201310

#include "OpenACC/libopenacc.h"

//#include "OpenACC/lib-openacc-host-to-device.h"
typedef struct acc_context_t_ * acc_context_t;

struct acc_kernel_version_t_ {
  /// Number of Gangs assumed by this version (0 means dynamic)
  unsigned long num_gang;

  /// Number of Workers assumed by this version (0 means dynamic)
  unsigned long num_worker;

  /// Vector length assumed by this version (0 means dynamic)
  unsigned long vector_length;

  /// Strides of the filling tiles for each loop assumed by this version (0 means dynamic)
  struct { unsigned long strides[4]; } * loops_tiling;

  /// suffix added to the name of the kernel (suffixes have a predetermined form, but building it at runtime would be long)  
  char * suffix;
};
typedef struct acc_kernel_version_t_ * acc_kernel_version_t;

struct acc_kernel_desc_t_ {
  unsigned id;

  /// Kernel name in the OpenCL C code
  const char * name;

  /// number of scalar arguments
  size_t num_scalars;
  /// size of scalar arguments
  size_t * size_scalars;

  /// number of data arguments
  size_t num_datas;

  /// number of loops
  size_t num_loops;

  unsigned num_versions;
  acc_kernel_version_t * versions;
};

struct acc_region_desc_t_ {
  unsigned id;

  char * file;

  size_t num_options;
  char ** options;

  size_t num_kernels;
  acc_kernel_desc_t * kernels;
};

/// Data-structure the compiler use to communicate information to the runtime
typedef struct acc_compiler_data_t_ {
  const char * acc_runtime_dir;
  const char * acc_runtime_ocl;
  const unsigned long num_regions;
  const acc_region_desc_t * regions;
} acc_compiler_data_t;

/// Forward declaration of compiler_data which will be generated by the compiler
extern acc_compiler_data_t compiler_data;

// Internal OpenACC API

/// Called by acc_init_kernel_first for each parallel/kernel region.
size_t acc_register_region(
  size_t region_cnt,
  const char * file,
  const size_t num_options,
  const char ** options,
  const size_t num_kernels,
  const acc_kernel_desc_t kernels
);

/// Called by acc_init_kernel_first for each kernel.
size_t acc_register_kernel(
  size_t kernel_cnt,
  size_t kernel_idx,
  const char * name,
  const size_t num_scalars,
  const size_t * size_scalars,
  const size_t num_datas
);

/*!
 *  \brief Fill the data structure containing the description of all kernels. Generated by the OpenACC Compiler
 *  It will be called by acc_init_once (only one time).
 *
 *  \todo Figure-out how to make it supports multiple compile unit.
 *        OpenACC code compiled in different compile unit will each produed a copy of this function.
 *        Finding a method to call all copies of this function (spread over multiple object files) from acc_init_once will be sufficient.
 */
void acc_init_kernel_first();

/*! \func acc_create_context
 *
 *  Create the context associated to 'region' and 'kernel'
 *
 *  \param region pointer to a parallel region descriptor
 *  \param kernel pointer to a kernel descriptor
 *  \return a non-zero value if an error occured
 */
acc_context_t acc_create_context(acc_region_t region, acc_kernel_t kernel);

/*!
 *  This functiom is generated by the compiler and initialize 'acc_runtime'
 */
void acc_application_specific_init();

/*!
 *  \brief Get the list of platforms and devices from OpenCL
 */
void acc_collect_ocl_devices();

/*!
 *  \brief Load sources of OpenCL C kernels from compiler generated file names
 */
void acc_load_ocl_sources();

/*!
 *  \brief Sorts collected OpenCL Devices
 */
void acc_init_devices();

/*!
 *  \brief Retrieved information from OS environment variables.
 */
void acc_init_defaults();

/**
 *  Initialize a region : build the associated OpenCL program
 */
void acc_region_init(size_t region_id, acc_device_t dev, int num);

/*!
 *  Set number gangs, number workers, and vector length to the current device default if they were not provided (value set to 0) 
 */
void acc_get_region_defaults(acc_region_t region, acc_device_t dev);

char * readSource(const char * sourceFilename);

#endif /* __LIB_OPENACC_INTERNAL_H__ */ /** @} */

